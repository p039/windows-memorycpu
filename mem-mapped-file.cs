/*
Source: http://www.sources.ru/csharp/Introduction-to-Memory-Mapped-Files.html

Доступ к MMF происходит как к обычному массиву. Т.е. мы можем создать фаил на диске, этот
фаил будет промаплен в память и б итоге мы будем работать с памятью и писать/читать этот фаил
как в обычный массив.

		*создаем фаил, маппим в память, работаем как с обычным массивом*

-Преимущества отображаемых в памяти файлов:
Одним из основных преимуществ использования memory-mapped files, это 
увеличение производительности при операциях чтения/записи в загруженный в
память файл. 
Доступ к памяти происходит быстрее, чем дисковые операции ввода/вывода, 
следовательно, повышение производительности достигается и при работе с очень большими файлами.
*/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.IO.MemoryMappedFiles;
  
namespace PersistentMemoryMappedFile
{


	/*
	В приведенном фрагменте кода сперва создаётся большой файл,
	а затем с помощью MemoryMappedFile меняется каждый стотысячный байт в потоке на "А".
	Если у вас есть программы умеющие работать с большими файлами, то Вы заметите разницу.
	*/

	class Program
	{
		static string LargeString = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" + 
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
									"00000000000000000000000000000000000000000000000000000000.";

		static void Main(string[] args)
		{
			CreateLargeFile();
			CreateMemoryMappedFile("largetextfile.txt");
  
		}
  
		private static void CreateMemoryMappedFile(string fileName)
		{
			FileInfo fInfo = new FileInfo(fileName);
			long length = fInfo.Length;
			MemoryMappedFile mySequentialMMF = MemoryMappedFile.CreateFromFile(fileName, FileMode.Open, "MySequentialMap");
			for (long i = 0; i < length; i = i + 100000)
			{
				MemoryMappedViewStream myMMFViewStream = mySequentialMMF.CreateViewStream(0, 100000, MemoryMappedFileAccess.ReadWrite);
				myMMFViewStream.WriteByte((byte)'A');
				Console.WriteLine("We changed a bit");
			}
		}
  
		private static void CreateLargeFile()
		{
			using (StreamWriter sw = new StreamWriter("largetextfile.txt", false))
			{
				for (int i = 0; i < 500000; i++)
					sw.WriteLine(LargeString);
			}
			File.Copy("largetextfile.txt", "largetextfileoriginal.txt");
  
		}
	}
}